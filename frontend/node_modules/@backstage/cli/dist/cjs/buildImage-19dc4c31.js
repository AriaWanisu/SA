'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('commander');
require('chalk');
var index = require('./index-dff1c82a.js');
var fs = _interopDefault(require('fs-extra'));
require('@backstage/cli-common');
var path2 = require('path');
var path2__default = _interopDefault(path2);
require('child_process');
require('util');
var run = require('./run-a8d49408.js');
require('tar');
require('os');
var index$1 = require('./index-596e217b.js');

const PKG_PATH = "package.json";
var buildImage = async (cmd) => {
  if (cmd.args.includes("--help")) {
    await run.run("docker", ["image", "build", "--help"]);
    return;
  }
  const pkgPath = index.paths.resolveTarget(PKG_PATH);
  const pkg = await fs.readJson(pkgPath);
  const appConfigs = await findAppConfigs();
  const tempDistWorkspace = await index$1.createDistWorkspace([pkg.name], {
    buildDependencies: Boolean(cmd.build),
    files: [
      "package.json",
      "yarn.lock",
      ...appConfigs,
      {src: index.paths.resolveTarget("Dockerfile"), dest: "Dockerfile"}
    ],
    skeleton: "skeleton.tar"
  });
  console.log(`Dist workspace ready at ${tempDistWorkspace}`);
  await run.run("docker", ["image", "build", ".", ...cmd.args], {
    cwd: tempDistWorkspace
  });
  await fs.remove(tempDistWorkspace);
};
async function findAppConfigs() {
  const files = [];
  for (const name of await fs.readdir(index.paths.targetRoot)) {
    if (name.startsWith("app-config.") && name.endsWith(".yaml")) {
      files.push(name);
    }
  }
  if (index.paths.targetRoot !== index.paths.targetDir) {
    const dirPath = path2.relative(index.paths.targetRoot, index.paths.targetDir);
    for (const name of await fs.readdir(index.paths.targetDir)) {
      if (name.startsWith("app-config.") && name.endsWith(".yaml")) {
        files.push(path2.join(dirPath, name));
      }
    }
  }
  return files;
}

exports.default = buildImage;
//# sourceMappingURL=buildImage-19dc4c31.js.map
