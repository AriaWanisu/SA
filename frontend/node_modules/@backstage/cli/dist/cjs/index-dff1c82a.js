'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var program = _interopDefault(require('commander'));
var chalk2 = _interopDefault(require('chalk'));
var fs = _interopDefault(require('fs-extra'));
var cliCommon = require('@backstage/cli-common');

class CustomError extends Error {
  get name() {
    return this.constructor.name;
  }
}
class ExitCodeError extends CustomError {
  constructor(code, command) {
    if (command) {
      super(`Command '${command}' exited with code ${code}`);
    } else {
      super(`Child exited with code ${code}`);
    }
    this.code = code;
  }
}
function exitWithError(error) {
  if (error instanceof ExitCodeError) {
    process.stderr.write(`
${chalk2.red(error.message)}

`);
    process.exit(error.code);
  } else {
    process.stderr.write(`
${chalk2.red(`${error}`)}

`);
    process.exit(1);
  }
}

const paths = cliCommon.findPaths(__dirname);

function findVersion() {
  const pkgContent = fs.readFileSync(paths.resolveOwn("package.json"), "utf8");
  return JSON.parse(pkgContent).version;
}
const version = findVersion();
const isDev = fs.pathExistsSync(paths.resolveOwn("src"));

function registerCommands(program) {
  program.command("app:build").description("Build an app for a production release").option("--stats", "Write bundle stats to output directory").action(lazy(() => Promise.resolve().then(function () { return require('./build-ebc6699b.js'); }).then((m) => m.default)));
  program.command("app:serve").description("Serve an app for local development").option("--check", "Enable type checking and linting").action(lazy(() => Promise.resolve().then(function () { return require('./serve-c841734a.js'); }).then((m) => m.default)));
  program.command("backend:build").description("Build a backend plugin").action(lazy(() => Promise.resolve().then(function () { return require('./build-965f7e8f.js'); }).then((m) => m.default)));
  program.command("backend:build-image").allowUnknownOption(true).helpOption(", --backstage-cli-help").option("--build", "Build packages before packing them into the image").description("Bundles the package into a docker image. All extra args are forwarded to docker image build").action(lazy(() => Promise.resolve().then(function () { return require('./buildImage-19dc4c31.js'); }).then((m) => m.default)));
  program.command("backend:dev").description("Start local development server with HMR for the backend").option("--check", "Enable type checking and linting").option("--inspect", "Enable debugger").action(lazy(() => Promise.resolve().then(function () { return require('./dev-73d933ab.js'); }).then((m) => m.default)));
  program.command("app:diff").option("--check", "Fail if changes are required").option("--yes", "Apply all changes").description("Diff an existing app with the creation template").action(lazy(() => Promise.resolve().then(function () { return require('./diff-10405dcb.js'); }).then((m) => m.default)));
  program.command("create-plugin").option("--backend", "Create plugin with the backend dependencies as default").description("Creates a new plugin in the current repository").option("--scope <scope>", "NPM scope").option("--npm-registry <URL>", "NPM registry URL").option("--no-private", "Public NPM Package").action(lazy(() => Promise.resolve().then(function () { return require('./createPlugin-aa3472ed.js'); }).then((m) => m.default)));
  program.command("remove-plugin").description("Removes plugin in the current repository").action(lazy(() => Promise.resolve().then(function () { return require('./removePlugin-80dcba16.js'); }).then((m) => m.default)));
  program.command("plugin:build").description("Build a plugin").action(lazy(() => Promise.resolve().then(function () { return require('./build-6f7360c2.js'); }).then((m) => m.default)));
  program.command("plugin:serve").description("Serves the dev/ folder of a plugin").option("--check", "Enable type checking and linting").action(lazy(() => Promise.resolve().then(function () { return require('./serve-d0b83818.js'); }).then((m) => m.default)));
  program.command("plugin:export").description("Exports the dev/ folder of a plugin").option("--stats", "Write bundle stats to output directory").action(lazy(() => Promise.resolve().then(function () { return require('./export-0e92b994.js'); }).then((m) => m.default)));
  program.command("plugin:diff").option("--check", "Fail if changes are required").option("--yes", "Apply all changes").description("Diff an existing plugin with the creation template").action(lazy(() => Promise.resolve().then(function () { return require('./diff-8e90c341.js'); }).then((m) => m.default)));
  program.command("build").description("Build a package for publishing").option("--outputs <formats>", "List of formats to output [types,cjs,esm]").action(lazy(() => Promise.resolve().then(function () { return require('./build-6c55031d.js'); }).then((m) => m.default)));
  program.command("lint").option("--format <format>", "Lint report output format", "eslint-formatter-friendly").option("--fix", "Attempt to automatically fix violations").description("Lint a package").action(lazy(() => Promise.resolve().then(function () { return require('./lint-77398c22.js'); }).then((m) => m.default)));
  program.command("test").allowUnknownOption(true).helpOption(", --backstage-cli-help").description("Run tests, forwarding args to Jest, defaulting to watch mode").action(lazy(() => Promise.resolve().then(function () { return require('./testCommand-ee8f0464.js'); }).then((m) => m.default)));
  program.command("config:print").option("--with-secrets", "Include secrets in the printed configuration").option("--env <env>", "The environment to print configuration for [APP_ENV or NODE_ENV or development]").option("--format <format>", "Format to print the configuration in, either json or yaml [yaml]").description("Print the app configuration for the current package").action(lazy(() => Promise.resolve().then(function () { return require('./print-9db033ec.js'); }).then((m) => m.default)));
  program.command("prepack").description("Prepares a package for packaging before publishing").action(lazy(() => Promise.resolve().then(function () { return require('./pack-36344a4a.js'); }).then((m) => m.pre)));
  program.command("postpack").description("Restores the changes made by the prepack command").action(lazy(() => Promise.resolve().then(function () { return require('./pack-36344a4a.js'); }).then((m) => m.post)));
  program.command("clean").description("Delete cache directories").action(lazy(() => Promise.resolve().then(function () { return require('./clean-9be6bef0.js'); }).then((m) => m.default)));
  program.command("build-workspace <workspace-dir> ...<packages>").description("Builds a temporary dist workspace from the provided packages").action(lazy(() => Promise.resolve().then(function () { return require('./buildWorkspace-06096fc5.js'); }).then((m) => m.default)));
}
function lazy(getActionFunc) {
  return async (...args) => {
    try {
      const actionFunc = await getActionFunc();
      await actionFunc(...args);
      process.exit(0);
    } catch (error) {
      exitWithError(error);
    }
  };
}

const main = (argv) => {
  program.name("backstage-cli").version(version);
  registerCommands(program);
  program.on("command:*", () => {
    console.log();
    console.log(chalk2.red(`Invalid command: ${program.args.join(" ")}`));
    console.log();
    program.outputHelp();
    process.exit(1);
  });
  program.parse(argv);
};
process.on("unhandledRejection", (rejection) => {
  if (rejection instanceof Error) {
    exitWithError(rejection);
  } else {
    exitWithError(new Error(`Unknown rejection: '${rejection}'`));
  }
});
main(process.argv);

exports.ExitCodeError = ExitCodeError;
exports.paths = paths;
exports.version = version;
//# sourceMappingURL=index-dff1c82a.js.map
