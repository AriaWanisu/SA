// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/ACER/app/ent/subjecttype"
	"github.com/facebookincubator/ent/dialect/sql"
)

// SubjectType is the model entity for the SubjectType schema.
type SubjectType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TypeName holds the value of the "type_name" field.
	TypeName string `json:"type_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubjectTypeQuery when eager-loading is set.
	Edges SubjectTypeEdges `json:"edges"`
}

// SubjectTypeEdges holds the relations/edges for other nodes in the graph.
type SubjectTypeEdges struct {
	// CourseItems holds the value of the course_items edge.
	CourseItems []*CourseItem
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CourseItemsOrErr returns the CourseItems value or an error if the edge
// was not loaded in eager-loading.
func (e SubjectTypeEdges) CourseItemsOrErr() ([]*CourseItem, error) {
	if e.loadedTypes[0] {
		return e.CourseItems, nil
	}
	return nil, &NotLoadedError{edge: "course_items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubjectType) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // type_name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubjectType fields.
func (st *SubjectType) assignValues(values ...interface{}) error {
	if m, n := len(values), len(subjecttype.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	st.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field type_name", values[0])
	} else if value.Valid {
		st.TypeName = value.String
	}
	return nil
}

// QueryCourseItems queries the course_items edge of the SubjectType.
func (st *SubjectType) QueryCourseItems() *CourseItemQuery {
	return (&SubjectTypeClient{config: st.config}).QueryCourseItems(st)
}

// Update returns a builder for updating this SubjectType.
// Note that, you need to call SubjectType.Unwrap() before calling this method, if this SubjectType
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *SubjectType) Update() *SubjectTypeUpdateOne {
	return (&SubjectTypeClient{config: st.config}).UpdateOne(st)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (st *SubjectType) Unwrap() *SubjectType {
	tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubjectType is not a transactional entity")
	}
	st.config.driver = tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *SubjectType) String() string {
	var builder strings.Builder
	builder.WriteString("SubjectType(")
	builder.WriteString(fmt.Sprintf("id=%v", st.ID))
	builder.WriteString(", type_name=")
	builder.WriteString(st.TypeName)
	builder.WriteByte(')')
	return builder.String()
}

// SubjectTypes is a parsable slice of SubjectType.
type SubjectTypes []*SubjectType

func (st SubjectTypes) config(cfg config) {
	for _i := range st {
		st[_i].config = cfg
	}
}
