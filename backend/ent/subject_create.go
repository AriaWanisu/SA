// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/ACER/app/ent/courseitem"
	"github.com/ACER/app/ent/subject"
	"github.com/ACER/app/ent/teacher"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// SubjectCreate is the builder for creating a Subject entity.
type SubjectCreate struct {
	config
	mutation *SubjectMutation
	hooks    []Hook
}

// SetSubjectName sets the subject_name field.
func (sc *SubjectCreate) SetSubjectName(s string) *SubjectCreate {
	sc.mutation.SetSubjectName(s)
	return sc
}

// SetOwnerID sets the owner edge to Teacher by id.
func (sc *SubjectCreate) SetOwnerID(id int) *SubjectCreate {
	sc.mutation.SetOwnerID(id)
	return sc
}

// SetNillableOwnerID sets the owner edge to Teacher by id if the given value is not nil.
func (sc *SubjectCreate) SetNillableOwnerID(id *int) *SubjectCreate {
	if id != nil {
		sc = sc.SetOwnerID(*id)
	}
	return sc
}

// SetOwner sets the owner edge to Teacher.
func (sc *SubjectCreate) SetOwner(t *Teacher) *SubjectCreate {
	return sc.SetOwnerID(t.ID)
}

// AddCourseItemIDs adds the course_items edge to CourseItem by ids.
func (sc *SubjectCreate) AddCourseItemIDs(ids ...int) *SubjectCreate {
	sc.mutation.AddCourseItemIDs(ids...)
	return sc
}

// AddCourseItems adds the course_items edges to CourseItem.
func (sc *SubjectCreate) AddCourseItems(c ...*CourseItem) *SubjectCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sc.AddCourseItemIDs(ids...)
}

// Mutation returns the SubjectMutation object of the builder.
func (sc *SubjectCreate) Mutation() *SubjectMutation {
	return sc.mutation
}

// Save creates the Subject in the database.
func (sc *SubjectCreate) Save(ctx context.Context) (*Subject, error) {
	if _, ok := sc.mutation.SubjectName(); !ok {
		return nil, &ValidationError{Name: "subject_name", err: errors.New("ent: missing required field \"subject_name\"")}
	}
	if v, ok := sc.mutation.SubjectName(); ok {
		if err := subject.SubjectNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "subject_name", err: fmt.Errorf("ent: validator failed for field \"subject_name\": %w", err)}
		}
	}
	var (
		err  error
		node *Subject
	)
	if len(sc.hooks) == 0 {
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SubjectCreate) SaveX(ctx context.Context) *Subject {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *SubjectCreate) sqlSave(ctx context.Context) (*Subject, error) {
	s, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	s.ID = int(id)
	return s, nil
}

func (sc *SubjectCreate) createSpec() (*Subject, *sqlgraph.CreateSpec) {
	var (
		s     = &Subject{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: subject.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: subject.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.SubjectName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subject.FieldSubjectName,
		})
		s.SubjectName = value
	}
	if nodes := sc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subject.OwnerTable,
			Columns: []string{subject.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.CourseItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.CourseItemsTable,
			Columns: []string{subject.CourseItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return s, _spec
}
