// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/ACER/app/ent/courseitem"
	"github.com/ACER/app/ent/predicate"
	"github.com/ACER/app/ent/subjecttype"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// SubjectTypeUpdate is the builder for updating SubjectType entities.
type SubjectTypeUpdate struct {
	config
	hooks      []Hook
	mutation   *SubjectTypeMutation
	predicates []predicate.SubjectType
}

// Where adds a new predicate for the builder.
func (stu *SubjectTypeUpdate) Where(ps ...predicate.SubjectType) *SubjectTypeUpdate {
	stu.predicates = append(stu.predicates, ps...)
	return stu
}

// SetTypeName sets the type_name field.
func (stu *SubjectTypeUpdate) SetTypeName(s string) *SubjectTypeUpdate {
	stu.mutation.SetTypeName(s)
	return stu
}

// AddCourseItemIDs adds the course_items edge to CourseItem by ids.
func (stu *SubjectTypeUpdate) AddCourseItemIDs(ids ...int) *SubjectTypeUpdate {
	stu.mutation.AddCourseItemIDs(ids...)
	return stu
}

// AddCourseItems adds the course_items edges to CourseItem.
func (stu *SubjectTypeUpdate) AddCourseItems(c ...*CourseItem) *SubjectTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return stu.AddCourseItemIDs(ids...)
}

// Mutation returns the SubjectTypeMutation object of the builder.
func (stu *SubjectTypeUpdate) Mutation() *SubjectTypeMutation {
	return stu.mutation
}

// RemoveCourseItemIDs removes the course_items edge to CourseItem by ids.
func (stu *SubjectTypeUpdate) RemoveCourseItemIDs(ids ...int) *SubjectTypeUpdate {
	stu.mutation.RemoveCourseItemIDs(ids...)
	return stu
}

// RemoveCourseItems removes course_items edges to CourseItem.
func (stu *SubjectTypeUpdate) RemoveCourseItems(c ...*CourseItem) *SubjectTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return stu.RemoveCourseItemIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (stu *SubjectTypeUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := stu.mutation.TypeName(); ok {
		if err := subjecttype.TypeNameValidator(v); err != nil {
			return 0, &ValidationError{Name: "type_name", err: fmt.Errorf("ent: validator failed for field \"type_name\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(stu.hooks) == 0 {
		affected, err = stu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubjectTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			stu.mutation = mutation
			affected, err = stu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(stu.hooks) - 1; i >= 0; i-- {
			mut = stu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (stu *SubjectTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *SubjectTypeUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *SubjectTypeUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stu *SubjectTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subjecttype.Table,
			Columns: subjecttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: subjecttype.FieldID,
			},
		},
	}
	if ps := stu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.TypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subjecttype.FieldTypeName,
		})
	}
	if nodes := stu.mutation.RemovedCourseItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subjecttype.CourseItemsTable,
			Columns: []string{subjecttype.CourseItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.CourseItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subjecttype.CourseItemsTable,
			Columns: []string{subjecttype.CourseItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subjecttype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SubjectTypeUpdateOne is the builder for updating a single SubjectType entity.
type SubjectTypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *SubjectTypeMutation
}

// SetTypeName sets the type_name field.
func (stuo *SubjectTypeUpdateOne) SetTypeName(s string) *SubjectTypeUpdateOne {
	stuo.mutation.SetTypeName(s)
	return stuo
}

// AddCourseItemIDs adds the course_items edge to CourseItem by ids.
func (stuo *SubjectTypeUpdateOne) AddCourseItemIDs(ids ...int) *SubjectTypeUpdateOne {
	stuo.mutation.AddCourseItemIDs(ids...)
	return stuo
}

// AddCourseItems adds the course_items edges to CourseItem.
func (stuo *SubjectTypeUpdateOne) AddCourseItems(c ...*CourseItem) *SubjectTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return stuo.AddCourseItemIDs(ids...)
}

// Mutation returns the SubjectTypeMutation object of the builder.
func (stuo *SubjectTypeUpdateOne) Mutation() *SubjectTypeMutation {
	return stuo.mutation
}

// RemoveCourseItemIDs removes the course_items edge to CourseItem by ids.
func (stuo *SubjectTypeUpdateOne) RemoveCourseItemIDs(ids ...int) *SubjectTypeUpdateOne {
	stuo.mutation.RemoveCourseItemIDs(ids...)
	return stuo
}

// RemoveCourseItems removes course_items edges to CourseItem.
func (stuo *SubjectTypeUpdateOne) RemoveCourseItems(c ...*CourseItem) *SubjectTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return stuo.RemoveCourseItemIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (stuo *SubjectTypeUpdateOne) Save(ctx context.Context) (*SubjectType, error) {
	if v, ok := stuo.mutation.TypeName(); ok {
		if err := subjecttype.TypeNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "type_name", err: fmt.Errorf("ent: validator failed for field \"type_name\": %w", err)}
		}
	}

	var (
		err  error
		node *SubjectType
	)
	if len(stuo.hooks) == 0 {
		node, err = stuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubjectTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			stuo.mutation = mutation
			node, err = stuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(stuo.hooks) - 1; i >= 0; i-- {
			mut = stuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *SubjectTypeUpdateOne) SaveX(ctx context.Context) *SubjectType {
	st, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return st
}

// Exec executes the query on the entity.
func (stuo *SubjectTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *SubjectTypeUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stuo *SubjectTypeUpdateOne) sqlSave(ctx context.Context) (st *SubjectType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subjecttype.Table,
			Columns: subjecttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: subjecttype.FieldID,
			},
		},
	}
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SubjectType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := stuo.mutation.TypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subjecttype.FieldTypeName,
		})
	}
	if nodes := stuo.mutation.RemovedCourseItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subjecttype.CourseItemsTable,
			Columns: []string{subjecttype.CourseItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.CourseItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subjecttype.CourseItemsTable,
			Columns: []string{subjecttype.CourseItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	st = &SubjectType{config: stuo.config}
	_spec.Assign = st.assignValues
	_spec.ScanValues = st.scanValues()
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subjecttype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return st, nil
}
