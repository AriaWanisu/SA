// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/ACER/app/ent/course"
	"github.com/ACER/app/ent/predicate"
	"github.com/ACER/app/ent/subject"
	"github.com/ACER/app/ent/teacher"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// TeacherUpdate is the builder for updating Teacher entities.
type TeacherUpdate struct {
	config
	hooks      []Hook
	mutation   *TeacherMutation
	predicates []predicate.Teacher
}

// Where adds a new predicate for the builder.
func (tu *TeacherUpdate) Where(ps ...predicate.Teacher) *TeacherUpdate {
	tu.predicates = append(tu.predicates, ps...)
	return tu
}

// SetTeacherEmail sets the teacher_email field.
func (tu *TeacherUpdate) SetTeacherEmail(s string) *TeacherUpdate {
	tu.mutation.SetTeacherEmail(s)
	return tu
}

// SetTeacherName sets the teacher_name field.
func (tu *TeacherUpdate) SetTeacherName(s string) *TeacherUpdate {
	tu.mutation.SetTeacherName(s)
	return tu
}

// AddSubjectIDs adds the subjects edge to Subject by ids.
func (tu *TeacherUpdate) AddSubjectIDs(ids ...int) *TeacherUpdate {
	tu.mutation.AddSubjectIDs(ids...)
	return tu
}

// AddSubjects adds the subjects edges to Subject.
func (tu *TeacherUpdate) AddSubjects(s ...*Subject) *TeacherUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.AddSubjectIDs(ids...)
}

// AddCourseIDs adds the courses edge to Course by ids.
func (tu *TeacherUpdate) AddCourseIDs(ids ...int) *TeacherUpdate {
	tu.mutation.AddCourseIDs(ids...)
	return tu
}

// AddCourses adds the courses edges to Course.
func (tu *TeacherUpdate) AddCourses(c ...*Course) *TeacherUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.AddCourseIDs(ids...)
}

// Mutation returns the TeacherMutation object of the builder.
func (tu *TeacherUpdate) Mutation() *TeacherMutation {
	return tu.mutation
}

// RemoveSubjectIDs removes the subjects edge to Subject by ids.
func (tu *TeacherUpdate) RemoveSubjectIDs(ids ...int) *TeacherUpdate {
	tu.mutation.RemoveSubjectIDs(ids...)
	return tu
}

// RemoveSubjects removes subjects edges to Subject.
func (tu *TeacherUpdate) RemoveSubjects(s ...*Subject) *TeacherUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.RemoveSubjectIDs(ids...)
}

// RemoveCourseIDs removes the courses edge to Course by ids.
func (tu *TeacherUpdate) RemoveCourseIDs(ids ...int) *TeacherUpdate {
	tu.mutation.RemoveCourseIDs(ids...)
	return tu
}

// RemoveCourses removes courses edges to Course.
func (tu *TeacherUpdate) RemoveCourses(c ...*Course) *TeacherUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.RemoveCourseIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tu *TeacherUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := tu.mutation.TeacherEmail(); ok {
		if err := teacher.TeacherEmailValidator(v); err != nil {
			return 0, &ValidationError{Name: "teacher_email", err: fmt.Errorf("ent: validator failed for field \"teacher_email\": %w", err)}
		}
	}
	if v, ok := tu.mutation.TeacherName(); ok {
		if err := teacher.TeacherNameValidator(v); err != nil {
			return 0, &ValidationError{Name: "teacher_name", err: fmt.Errorf("ent: validator failed for field \"teacher_name\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeacherMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TeacherUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TeacherUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TeacherUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TeacherUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   teacher.Table,
			Columns: teacher.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: teacher.FieldID,
			},
		},
	}
	if ps := tu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.TeacherEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teacher.FieldTeacherEmail,
		})
	}
	if value, ok := tu.mutation.TeacherName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teacher.FieldTeacherName,
		})
	}
	if nodes := tu.mutation.RemovedSubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.SubjectsTable,
			Columns: []string{teacher.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.SubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.SubjectsTable,
			Columns: []string{teacher.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := tu.mutation.RemovedCoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.CoursesTable,
			Columns: []string{teacher.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.CoursesTable,
			Columns: []string{teacher.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teacher.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TeacherUpdateOne is the builder for updating a single Teacher entity.
type TeacherUpdateOne struct {
	config
	hooks    []Hook
	mutation *TeacherMutation
}

// SetTeacherEmail sets the teacher_email field.
func (tuo *TeacherUpdateOne) SetTeacherEmail(s string) *TeacherUpdateOne {
	tuo.mutation.SetTeacherEmail(s)
	return tuo
}

// SetTeacherName sets the teacher_name field.
func (tuo *TeacherUpdateOne) SetTeacherName(s string) *TeacherUpdateOne {
	tuo.mutation.SetTeacherName(s)
	return tuo
}

// AddSubjectIDs adds the subjects edge to Subject by ids.
func (tuo *TeacherUpdateOne) AddSubjectIDs(ids ...int) *TeacherUpdateOne {
	tuo.mutation.AddSubjectIDs(ids...)
	return tuo
}

// AddSubjects adds the subjects edges to Subject.
func (tuo *TeacherUpdateOne) AddSubjects(s ...*Subject) *TeacherUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.AddSubjectIDs(ids...)
}

// AddCourseIDs adds the courses edge to Course by ids.
func (tuo *TeacherUpdateOne) AddCourseIDs(ids ...int) *TeacherUpdateOne {
	tuo.mutation.AddCourseIDs(ids...)
	return tuo
}

// AddCourses adds the courses edges to Course.
func (tuo *TeacherUpdateOne) AddCourses(c ...*Course) *TeacherUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.AddCourseIDs(ids...)
}

// Mutation returns the TeacherMutation object of the builder.
func (tuo *TeacherUpdateOne) Mutation() *TeacherMutation {
	return tuo.mutation
}

// RemoveSubjectIDs removes the subjects edge to Subject by ids.
func (tuo *TeacherUpdateOne) RemoveSubjectIDs(ids ...int) *TeacherUpdateOne {
	tuo.mutation.RemoveSubjectIDs(ids...)
	return tuo
}

// RemoveSubjects removes subjects edges to Subject.
func (tuo *TeacherUpdateOne) RemoveSubjects(s ...*Subject) *TeacherUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.RemoveSubjectIDs(ids...)
}

// RemoveCourseIDs removes the courses edge to Course by ids.
func (tuo *TeacherUpdateOne) RemoveCourseIDs(ids ...int) *TeacherUpdateOne {
	tuo.mutation.RemoveCourseIDs(ids...)
	return tuo
}

// RemoveCourses removes courses edges to Course.
func (tuo *TeacherUpdateOne) RemoveCourses(c ...*Course) *TeacherUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.RemoveCourseIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (tuo *TeacherUpdateOne) Save(ctx context.Context) (*Teacher, error) {
	if v, ok := tuo.mutation.TeacherEmail(); ok {
		if err := teacher.TeacherEmailValidator(v); err != nil {
			return nil, &ValidationError{Name: "teacher_email", err: fmt.Errorf("ent: validator failed for field \"teacher_email\": %w", err)}
		}
	}
	if v, ok := tuo.mutation.TeacherName(); ok {
		if err := teacher.TeacherNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "teacher_name", err: fmt.Errorf("ent: validator failed for field \"teacher_name\": %w", err)}
		}
	}

	var (
		err  error
		node *Teacher
	)
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeacherMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TeacherUpdateOne) SaveX(ctx context.Context) *Teacher {
	t, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return t
}

// Exec executes the query on the entity.
func (tuo *TeacherUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TeacherUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TeacherUpdateOne) sqlSave(ctx context.Context) (t *Teacher, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   teacher.Table,
			Columns: teacher.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: teacher.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Teacher.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := tuo.mutation.TeacherEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teacher.FieldTeacherEmail,
		})
	}
	if value, ok := tuo.mutation.TeacherName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teacher.FieldTeacherName,
		})
	}
	if nodes := tuo.mutation.RemovedSubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.SubjectsTable,
			Columns: []string{teacher.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.SubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.SubjectsTable,
			Columns: []string{teacher.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := tuo.mutation.RemovedCoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.CoursesTable,
			Columns: []string{teacher.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teacher.CoursesTable,
			Columns: []string{teacher.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	t = &Teacher{config: tuo.config}
	_spec.Assign = t.assignValues
	_spec.ScanValues = t.scanValues()
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teacher.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return t, nil
}
