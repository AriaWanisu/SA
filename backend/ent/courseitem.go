// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/ACER/app/ent/course"
	"github.com/ACER/app/ent/courseitem"
	"github.com/ACER/app/ent/subject"
	"github.com/ACER/app/ent/subjecttype"
	"github.com/facebookincubator/ent/dialect/sql"
)

// CourseItem is the model entity for the CourseItem schema.
type CourseItem struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CourseItemQuery when eager-loading is set.
	Edges      CourseItemEdges `json:"edges"`
	course_id  *int
	subject_id *int
	type_id    *int
}

// CourseItemEdges holds the relations/edges for other nodes in the graph.
type CourseItemEdges struct {
	// Courses holds the value of the courses edge.
	Courses *Course
	// Subjects holds the value of the subjects edge.
	Subjects *Subject
	// Types holds the value of the types edge.
	Types *SubjectType
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CoursesOrErr returns the Courses value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CourseItemEdges) CoursesOrErr() (*Course, error) {
	if e.loadedTypes[0] {
		if e.Courses == nil {
			// The edge courses was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: course.Label}
		}
		return e.Courses, nil
	}
	return nil, &NotLoadedError{edge: "courses"}
}

// SubjectsOrErr returns the Subjects value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CourseItemEdges) SubjectsOrErr() (*Subject, error) {
	if e.loadedTypes[1] {
		if e.Subjects == nil {
			// The edge subjects was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: subject.Label}
		}
		return e.Subjects, nil
	}
	return nil, &NotLoadedError{edge: "subjects"}
}

// TypesOrErr returns the Types value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CourseItemEdges) TypesOrErr() (*SubjectType, error) {
	if e.loadedTypes[2] {
		if e.Types == nil {
			// The edge types was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: subjecttype.Label}
		}
		return e.Types, nil
	}
	return nil, &NotLoadedError{edge: "types"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CourseItem) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*CourseItem) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // course_id
		&sql.NullInt64{}, // subject_id
		&sql.NullInt64{}, // type_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CourseItem fields.
func (ci *CourseItem) assignValues(values ...interface{}) error {
	if m, n := len(values), len(courseitem.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ci.ID = int(value.Int64)
	values = values[1:]
	values = values[0:]
	if len(values) == len(courseitem.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field course_id", value)
		} else if value.Valid {
			ci.course_id = new(int)
			*ci.course_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field subject_id", value)
		} else if value.Valid {
			ci.subject_id = new(int)
			*ci.subject_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field type_id", value)
		} else if value.Valid {
			ci.type_id = new(int)
			*ci.type_id = int(value.Int64)
		}
	}
	return nil
}

// QueryCourses queries the courses edge of the CourseItem.
func (ci *CourseItem) QueryCourses() *CourseQuery {
	return (&CourseItemClient{config: ci.config}).QueryCourses(ci)
}

// QuerySubjects queries the subjects edge of the CourseItem.
func (ci *CourseItem) QuerySubjects() *SubjectQuery {
	return (&CourseItemClient{config: ci.config}).QuerySubjects(ci)
}

// QueryTypes queries the types edge of the CourseItem.
func (ci *CourseItem) QueryTypes() *SubjectTypeQuery {
	return (&CourseItemClient{config: ci.config}).QueryTypes(ci)
}

// Update returns a builder for updating this CourseItem.
// Note that, you need to call CourseItem.Unwrap() before calling this method, if this CourseItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (ci *CourseItem) Update() *CourseItemUpdateOne {
	return (&CourseItemClient{config: ci.config}).UpdateOne(ci)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ci *CourseItem) Unwrap() *CourseItem {
	tx, ok := ci.config.driver.(*txDriver)
	if !ok {
		panic("ent: CourseItem is not a transactional entity")
	}
	ci.config.driver = tx.drv
	return ci
}

// String implements the fmt.Stringer.
func (ci *CourseItem) String() string {
	var builder strings.Builder
	builder.WriteString("CourseItem(")
	builder.WriteString(fmt.Sprintf("id=%v", ci.ID))
	builder.WriteByte(')')
	return builder.String()
}

// CourseItems is a parsable slice of CourseItem.
type CourseItems []*CourseItem

func (ci CourseItems) config(cfg config) {
	for _i := range ci {
		ci[_i].config = cfg
	}
}
