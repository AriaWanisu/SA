// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/ACER/app/ent/subject"
	"github.com/ACER/app/ent/teacher"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Subject is the model entity for the Subject schema.
type Subject struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SubjectName holds the value of the "subject_name" field.
	SubjectName string `json:"subject_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubjectQuery when eager-loading is set.
	Edges    SubjectEdges `json:"edges"`
	owner_id *int
}

// SubjectEdges holds the relations/edges for other nodes in the graph.
type SubjectEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Teacher
	// CourseItems holds the value of the course_items edge.
	CourseItems []*CourseItem
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubjectEdges) OwnerOrErr() (*Teacher, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: teacher.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// CourseItemsOrErr returns the CourseItems value or an error if the edge
// was not loaded in eager-loading.
func (e SubjectEdges) CourseItemsOrErr() ([]*CourseItem, error) {
	if e.loadedTypes[1] {
		return e.CourseItems, nil
	}
	return nil, &NotLoadedError{edge: "course_items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Subject) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // subject_name
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Subject) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // owner_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Subject fields.
func (s *Subject) assignValues(values ...interface{}) error {
	if m, n := len(values), len(subject.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field subject_name", values[0])
	} else if value.Valid {
		s.SubjectName = value.String
	}
	values = values[1:]
	if len(values) == len(subject.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field owner_id", value)
		} else if value.Valid {
			s.owner_id = new(int)
			*s.owner_id = int(value.Int64)
		}
	}
	return nil
}

// QueryOwner queries the owner edge of the Subject.
func (s *Subject) QueryOwner() *TeacherQuery {
	return (&SubjectClient{config: s.config}).QueryOwner(s)
}

// QueryCourseItems queries the course_items edge of the Subject.
func (s *Subject) QueryCourseItems() *CourseItemQuery {
	return (&SubjectClient{config: s.config}).QueryCourseItems(s)
}

// Update returns a builder for updating this Subject.
// Note that, you need to call Subject.Unwrap() before calling this method, if this Subject
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Subject) Update() *SubjectUpdateOne {
	return (&SubjectClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Subject) Unwrap() *Subject {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Subject is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Subject) String() string {
	var builder strings.Builder
	builder.WriteString("Subject(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", subject_name=")
	builder.WriteString(s.SubjectName)
	builder.WriteByte(')')
	return builder.String()
}

// Subjects is a parsable slice of Subject.
type Subjects []*Subject

func (s Subjects) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
