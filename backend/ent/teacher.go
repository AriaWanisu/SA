// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/ACER/app/ent/teacher"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Teacher is the model entity for the Teacher schema.
type Teacher struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TeacherEmail holds the value of the "teacher_email" field.
	TeacherEmail string `json:"teacher_email,omitempty"`
	// TeacherName holds the value of the "teacher_name" field.
	TeacherName string `json:"teacher_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TeacherQuery when eager-loading is set.
	Edges TeacherEdges `json:"edges"`
}

// TeacherEdges holds the relations/edges for other nodes in the graph.
type TeacherEdges struct {
	// Subjects holds the value of the subjects edge.
	Subjects []*Subject
	// Courses holds the value of the courses edge.
	Courses []*Course
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SubjectsOrErr returns the Subjects value or an error if the edge
// was not loaded in eager-loading.
func (e TeacherEdges) SubjectsOrErr() ([]*Subject, error) {
	if e.loadedTypes[0] {
		return e.Subjects, nil
	}
	return nil, &NotLoadedError{edge: "subjects"}
}

// CoursesOrErr returns the Courses value or an error if the edge
// was not loaded in eager-loading.
func (e TeacherEdges) CoursesOrErr() ([]*Course, error) {
	if e.loadedTypes[1] {
		return e.Courses, nil
	}
	return nil, &NotLoadedError{edge: "courses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Teacher) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // teacher_email
		&sql.NullString{}, // teacher_name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Teacher fields.
func (t *Teacher) assignValues(values ...interface{}) error {
	if m, n := len(values), len(teacher.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	t.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field teacher_email", values[0])
	} else if value.Valid {
		t.TeacherEmail = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field teacher_name", values[1])
	} else if value.Valid {
		t.TeacherName = value.String
	}
	return nil
}

// QuerySubjects queries the subjects edge of the Teacher.
func (t *Teacher) QuerySubjects() *SubjectQuery {
	return (&TeacherClient{config: t.config}).QuerySubjects(t)
}

// QueryCourses queries the courses edge of the Teacher.
func (t *Teacher) QueryCourses() *CourseQuery {
	return (&TeacherClient{config: t.config}).QueryCourses(t)
}

// Update returns a builder for updating this Teacher.
// Note that, you need to call Teacher.Unwrap() before calling this method, if this Teacher
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Teacher) Update() *TeacherUpdateOne {
	return (&TeacherClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Teacher) Unwrap() *Teacher {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Teacher is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Teacher) String() string {
	var builder strings.Builder
	builder.WriteString("Teacher(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", teacher_email=")
	builder.WriteString(t.TeacherEmail)
	builder.WriteString(", teacher_name=")
	builder.WriteString(t.TeacherName)
	builder.WriteByte(')')
	return builder.String()
}

// Teachers is a parsable slice of Teacher.
type Teachers []*Teacher

func (t Teachers) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
